{"ast":null,"code":"import _slicedToArray from\"C:/Users/Toan/Desktop/reactjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useMemo}from\"react\";import{useFrame}from\"@react-three/fiber\";import*as THREE from\"three\";import{jsx as _jsx}from\"react/jsx-runtime\";var STAR_COUNT=2000;export function Stars(){var group=useRef();var theta=0;useFrame(function(){var rotation=2*Math.sin(THREE.Math.degToRad(theta+=0.1));var scale=Math.cos(THREE.Math.degToRad(theta*2));group.current.rotation.set(rotation,rotation,rotation);group.current.scale.set(scale,scale,scale);});var _useMemo=useMemo(function(){var geometry=new THREE.SphereBufferGeometry(1,10,10);var material=new THREE.MeshBasicMaterial({color:new THREE.Color(\"lightblue\")});var coordinates=new Array(STAR_COUNT).fill().map(function(i){return[Math.random()*800-400,Math.random()*800-400,Math.random()*800-400];});return[geometry,material,coordinates];},[]),_useMemo2=_slicedToArray(_useMemo,3),geometry=_useMemo2[0],material=_useMemo2[1],coordinates=_useMemo2[2];return/*#__PURE__*/_jsx(\"group\",{ref:group,children:coordinates.map(function(_ref,idx){var _ref2=_slicedToArray(_ref,3),p1=_ref2[0],p2=_ref2[1],p3=_ref2[2];return/*#__PURE__*/_jsx(\"mesh\",{geometry:geometry,material:material,position:[p1,p2,p3]},idx);})});}","map":{"version":3,"sources":["C:/Users/Toan/Desktop/reactjs/src/components/pages/Stars.js"],"names":["React","useRef","useMemo","useFrame","THREE","STAR_COUNT","Stars","group","theta","rotation","Math","sin","degToRad","scale","cos","current","set","geometry","SphereBufferGeometry","material","MeshBasicMaterial","color","Color","coordinates","Array","fill","map","i","random","idx","p1","p2","p3"],"mappings":"oJAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,OAAxB,KAAuC,OAAvC,CACA,OAASC,QAAT,KAAyB,oBAAzB,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,OAAvB,C,2CAEA,GAAMC,CAAAA,UAAU,CAAG,IAAnB,CAEA,MAAO,SAASC,CAAAA,KAAT,EAAiB,CACtB,GAAIC,CAAAA,KAAK,CAAGN,MAAM,EAAlB,CACA,GAAIO,CAAAA,KAAK,CAAG,CAAZ,CACAL,QAAQ,CAAC,UAAM,CACb,GAAMM,CAAAA,QAAQ,CAAG,EAAIC,IAAI,CAACC,GAAL,CAASP,KAAK,CAACM,IAAN,CAAWE,QAAX,CAAqBJ,KAAK,EAAI,GAA9B,CAAT,CAArB,CACA,GAAMK,CAAAA,KAAK,CAAGH,IAAI,CAACI,GAAL,CAASV,KAAK,CAACM,IAAN,CAAWE,QAAX,CAAoBJ,KAAK,CAAG,CAA5B,CAAT,CAAd,CACAD,KAAK,CAACQ,OAAN,CAAcN,QAAd,CAAuBO,GAAvB,CAA2BP,QAA3B,CAAqCA,QAArC,CAA+CA,QAA/C,EACAF,KAAK,CAACQ,OAAN,CAAcF,KAAd,CAAoBG,GAApB,CAAwBH,KAAxB,CAA+BA,KAA/B,CAAsCA,KAAtC,EACD,CALO,CAAR,CAOA,aAA0CX,OAAO,CAAC,UAAM,CACtD,GAAMe,CAAAA,QAAQ,CAAG,GAAIb,CAAAA,KAAK,CAACc,oBAAV,CAA+B,CAA/B,CAAkC,EAAlC,CAAsC,EAAtC,CAAjB,CACA,GAAMC,CAAAA,QAAQ,CAAG,GAAIf,CAAAA,KAAK,CAACgB,iBAAV,CAA4B,CAC3CC,KAAK,CAAE,GAAIjB,CAAAA,KAAK,CAACkB,KAAV,CAAgB,WAAhB,CADoC,CAA5B,CAAjB,CAGA,GAAMC,CAAAA,WAAW,CAAG,GAAIC,CAAAA,KAAJ,CAAUnB,UAAV,EACjBoB,IADiB,GAEjBC,GAFiB,CAEb,SAACC,CAAD,QAAO,CACVjB,IAAI,CAACkB,MAAL,GAAgB,GAAhB,CAAsB,GADZ,CAEVlB,IAAI,CAACkB,MAAL,GAAgB,GAAhB,CAAsB,GAFZ,CAGVlB,IAAI,CAACkB,MAAL,GAAgB,GAAhB,CAAsB,GAHZ,CAAP,EAFa,CAApB,CAOA,MAAO,CAACX,QAAD,CAAWE,QAAX,CAAqBI,WAArB,CAAP,CACD,CAbgD,CAa9C,EAb8C,CAAjD,sCAAON,QAAP,cAAiBE,QAAjB,cAA2BI,WAA3B,cAeA,mBACE,cAAO,GAAG,CAAEhB,KAAZ,UACGgB,WAAW,CAACG,GAAZ,CAAgB,cAAeG,GAAf,mCAAEC,EAAF,UAAMC,EAAN,UAAUC,EAAV,6BACf,aAEE,QAAQ,CAAEf,QAFZ,CAGE,QAAQ,CAAEE,QAHZ,CAIE,QAAQ,CAAE,CAACW,EAAD,CAAKC,EAAL,CAASC,EAAT,CAJZ,EACOH,GADP,CADe,EAAhB,CADH,EADF,CAYD","sourcesContent":["import React, { useRef, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\n\r\nconst STAR_COUNT = 2000;\r\n\r\nexport function Stars() {\r\n  let group = useRef();\r\n  let theta = 0;\r\n  useFrame(() => {\r\n    const rotation = 2 * Math.sin(THREE.Math.degToRad((theta += 0.1)));\r\n    const scale = Math.cos(THREE.Math.degToRad(theta * 2));\r\n    group.current.rotation.set(rotation, rotation, rotation);\r\n    group.current.scale.set(scale, scale, scale);\r\n  });\r\n\r\n  const [geometry, material, coordinates] = useMemo(() => {\r\n    const geometry = new THREE.SphereBufferGeometry(1, 10, 10);\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: new THREE.Color(\"lightblue\"),\r\n    });\r\n    const coordinates = new Array(STAR_COUNT)\r\n      .fill()\r\n      .map((i) => [\r\n        Math.random() * 800 - 400,\r\n        Math.random() * 800 - 400,\r\n        Math.random() * 800 - 400,\r\n      ]);\r\n    return [geometry, material, coordinates];\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={group}>\r\n      {coordinates.map(([p1, p2, p3], idx) => (\r\n        <mesh\r\n          key={idx}\r\n          geometry={geometry}\r\n          material={material}\r\n          position={[p1, p2, p3]}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}