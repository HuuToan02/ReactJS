{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toan\\\\Desktop\\\\reactjs\\\\src\\\\components\\\\Animation\\\\Stars.js\",\n    _s = $RefreshSig$();\n\nimport { THREE } from \"react-three-fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STAR_COUNT = 2000;\n\nconst Stars = () => {\n  _s();\n\n  let group = useRef();\n  let theta = 0;\n  useFrame(() => {\n    const rotation = 5 * Math.sin(THREE.Math.degToRad(theta += 0.1));\n    const scale = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(rotation, rotation, rotation);\n    group.current.scale.set(scale, scale, scale);\n  });\n  const [geometry, material, coordinates] = useMemo(() => {\n    const geometry = new THREE.SphereBufferGeometry(1, 10, 10);\n    const material = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(\"lightblue\")\n    });\n    const coordinates = new Array(STAR_COUNT).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]);\n    return [geometry, material, coordinates];\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: group,\n    children: coordinates.map(([p1, p2, p3], idx) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: geometry,\n      material: material,\n      position: [p1, p2, p3]\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Stars, \"mkfXPHl3V9uwasqlY5AEpxQOv2A=\", true);\n\n_c = Stars;\nexport default Stars;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"sources":["C:/Users/Toan/Desktop/reactjs/src/components/Animation/Stars.js"],"names":["THREE","STAR_COUNT","Stars","group","useRef","theta","useFrame","rotation","Math","sin","degToRad","scale","cos","current","set","geometry","material","coordinates","useMemo","SphereBufferGeometry","MeshBasicMaterial","color","Color","Array","fill","map","i","random","p1","p2","p3","idx"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,mBAAtB;;AACA,MAAMC,UAAU,GAAG,IAAnB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,MAAIC,KAAK,GAAGC,MAAM,EAAlB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACAC,EAAAA,QAAQ,CAAC,MAAM;AACb,UAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACC,GAAL,CAAST,KAAK,CAACQ,IAAN,CAAWE,QAAX,CAAqBL,KAAK,IAAI,GAA9B,CAAT,CAArB;AACA,UAAMM,KAAK,GAAGH,IAAI,CAACI,GAAL,CAASZ,KAAK,CAACQ,IAAN,CAAWE,QAAX,CAAoBL,KAAK,GAAG,CAA5B,CAAT,CAAd;AACAF,IAAAA,KAAK,CAACU,OAAN,CAAcN,QAAd,CAAuBO,GAAvB,CAA2BP,QAA3B,EAAqCA,QAArC,EAA+CA,QAA/C;AACAJ,IAAAA,KAAK,CAACU,OAAN,CAAcF,KAAd,CAAoBG,GAApB,CAAwBH,KAAxB,EAA+BA,KAA/B,EAAsCA,KAAtC;AACD,GALO,CAAR;AAOA,QAAM,CAACI,QAAD,EAAWC,QAAX,EAAqBC,WAArB,IAAoCC,OAAO,CAAC,MAAM;AACtD,UAAMH,QAAQ,GAAG,IAAIf,KAAK,CAACmB,oBAAV,CAA+B,CAA/B,EAAkC,EAAlC,EAAsC,EAAtC,CAAjB;AACA,UAAMH,QAAQ,GAAG,IAAIhB,KAAK,CAACoB,iBAAV,CAA4B;AAC3CC,MAAAA,KAAK,EAAE,IAAIrB,KAAK,CAACsB,KAAV,CAAgB,WAAhB;AADoC,KAA5B,CAAjB;AAGA,UAAML,WAAW,GAAG,IAAIM,KAAJ,CAAUtB,UAAV,EACjBuB,IADiB,GAEjBC,GAFiB,CAEZC,CAAD,IAAO,CACVlB,IAAI,CAACmB,MAAL,KAAgB,GAAhB,GAAsB,GADZ,EAEVnB,IAAI,CAACmB,MAAL,KAAgB,GAAhB,GAAsB,GAFZ,EAGVnB,IAAI,CAACmB,MAAL,KAAgB,GAAhB,GAAsB,GAHZ,CAFM,CAApB;AAOA,WAAO,CAACZ,QAAD,EAAWC,QAAX,EAAqBC,WAArB,CAAP;AACD,GAbgD,EAa9C,EAb8C,CAAjD;AAeA,sBACE;AAAO,IAAA,GAAG,EAAEd,KAAZ;AAAA,cACGc,WAAW,CAACQ,GAAZ,CAAgB,CAAC,CAACG,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAD,EAAeC,GAAf,kBACf;AAEE,MAAA,QAAQ,EAAEhB,QAFZ;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,QAAQ,EAAE,CAACY,EAAD,EAAKC,EAAL,EAASC,EAAT;AAJZ,OACOC,GADP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CArCD;;GAAM7B,K;;KAAAA,K;AAuCN,eAAeA,KAAf","sourcesContent":["import { THREE } from \"react-three-fiber\";\r\nconst STAR_COUNT = 2000;\r\n\r\nconst Stars = () => {\r\n  let group = useRef();\r\n  let theta = 0;\r\n  useFrame(() => {\r\n    const rotation = 5 * Math.sin(THREE.Math.degToRad((theta += 0.1)));\r\n    const scale = Math.cos(THREE.Math.degToRad(theta * 2));\r\n    group.current.rotation.set(rotation, rotation, rotation);\r\n    group.current.scale.set(scale, scale, scale);\r\n  });\r\n\r\n  const [geometry, material, coordinates] = useMemo(() => {\r\n    const geometry = new THREE.SphereBufferGeometry(1, 10, 10);\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: new THREE.Color(\"lightblue\"),\r\n    });\r\n    const coordinates = new Array(STAR_COUNT)\r\n      .fill()\r\n      .map((i) => [\r\n        Math.random() * 800 - 400,\r\n        Math.random() * 800 - 400,\r\n        Math.random() * 800 - 400,\r\n      ]);\r\n    return [geometry, material, coordinates];\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={group}>\r\n      {coordinates.map(([p1, p2, p3], idx) => (\r\n        <mesh\r\n          key={idx}\r\n          geometry={geometry}\r\n          material={material}\r\n          position={[p1, p2, p3]}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Stars;\r\n"]},"metadata":{},"sourceType":"module"}