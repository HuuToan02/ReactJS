{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toan\\\\Desktop\\\\reactjs\\\\src\\\\components\\\\pages\\\\Stars.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useMemo } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STAR_COUNT = 1;\nexport function Stars() {\n  _s();\n\n  let group = useRef();\n  let theta = 0;\n  useFrame(() => {\n    const rotation = 2 * Math.sin(THREE.Math.degToRad(theta += 0.1));\n    const scale = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(rotation, rotation, rotation);\n    group.current.scale.set(scale, scale, scale);\n  });\n  const [geometry, material, coordinates] = useMemo(() => {\n    const geometry = new THREE.SphereBufferGeometry(1, 10, 10);\n    const material = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(\"lightblue\")\n    });\n    const coordinates = new Array(STAR_COUNT).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]);\n    return [geometry, material, coordinates];\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: group,\n    children: coordinates.map(([p1, p2, p3], idx) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: geometry,\n      material: material,\n      position: [p1, p2, p3]\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stars, \"mkfXPHl3V9uwasqlY5AEpxQOv2A=\", false, function () {\n  return [useFrame];\n});\n\n_c = Stars;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stars\");","map":{"version":3,"sources":["C:/Users/Toan/Desktop/reactjs/src/components/pages/Stars.js"],"names":["React","useRef","useMemo","useFrame","THREE","STAR_COUNT","Stars","group","theta","rotation","Math","sin","degToRad","scale","cos","current","set","geometry","material","coordinates","SphereBufferGeometry","MeshBasicMaterial","color","Color","Array","fill","map","i","random","p1","p2","p3","idx"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,MAAMC,UAAU,GAAG,CAAnB;AAEA,OAAO,SAASC,KAAT,GAAiB;AAAA;;AACtB,MAAIC,KAAK,GAAGN,MAAM,EAAlB;AACA,MAAIO,KAAK,GAAG,CAAZ;AACAL,EAAAA,QAAQ,CAAC,MAAM;AACb,UAAMM,QAAQ,GAAG,IAAIC,IAAI,CAACC,GAAL,CAASP,KAAK,CAACM,IAAN,CAAWE,QAAX,CAAqBJ,KAAK,IAAI,GAA9B,CAAT,CAArB;AACA,UAAMK,KAAK,GAAGH,IAAI,CAACI,GAAL,CAASV,KAAK,CAACM,IAAN,CAAWE,QAAX,CAAoBJ,KAAK,GAAG,CAA5B,CAAT,CAAd;AACAD,IAAAA,KAAK,CAACQ,OAAN,CAAcN,QAAd,CAAuBO,GAAvB,CAA2BP,QAA3B,EAAqCA,QAArC,EAA+CA,QAA/C;AACAF,IAAAA,KAAK,CAACQ,OAAN,CAAcF,KAAd,CAAoBG,GAApB,CAAwBH,KAAxB,EAA+BA,KAA/B,EAAsCA,KAAtC;AACD,GALO,CAAR;AAOA,QAAM,CAACI,QAAD,EAAWC,QAAX,EAAqBC,WAArB,IAAoCjB,OAAO,CAAC,MAAM;AACtD,UAAMe,QAAQ,GAAG,IAAIb,KAAK,CAACgB,oBAAV,CAA+B,CAA/B,EAAkC,EAAlC,EAAsC,EAAtC,CAAjB;AACA,UAAMF,QAAQ,GAAG,IAAId,KAAK,CAACiB,iBAAV,CAA4B;AAC3CC,MAAAA,KAAK,EAAE,IAAIlB,KAAK,CAACmB,KAAV,CAAgB,WAAhB;AADoC,KAA5B,CAAjB;AAGA,UAAMJ,WAAW,GAAG,IAAIK,KAAJ,CAAUnB,UAAV,EACjBoB,IADiB,GAEjBC,GAFiB,CAEZC,CAAD,IAAO,CACVjB,IAAI,CAACkB,MAAL,KAAgB,GAAhB,GAAsB,GADZ,EAEVlB,IAAI,CAACkB,MAAL,KAAgB,GAAhB,GAAsB,GAFZ,EAGVlB,IAAI,CAACkB,MAAL,KAAgB,GAAhB,GAAsB,GAHZ,CAFM,CAApB;AAOA,WAAO,CAACX,QAAD,EAAWC,QAAX,EAAqBC,WAArB,CAAP;AACD,GAbgD,EAa9C,EAb8C,CAAjD;AAeA,sBACE;AAAO,IAAA,GAAG,EAAEZ,KAAZ;AAAA,cACGY,WAAW,CAACO,GAAZ,CAAgB,CAAC,CAACG,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAD,EAAeC,GAAf,kBACf;AAEE,MAAA,QAAQ,EAAEf,QAFZ;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,QAAQ,EAAE,CAACW,EAAD,EAAKC,EAAL,EAASC,EAAT;AAJZ,OACOC,GADP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArCe1B,K;UAGdH,Q;;;KAHcG,K","sourcesContent":["import React, { useRef, useMemo } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\n\r\nconst STAR_COUNT = 1;\r\n\r\nexport function Stars() {\r\n  let group = useRef();\r\n  let theta = 0;\r\n  useFrame(() => {\r\n    const rotation = 2 * Math.sin(THREE.Math.degToRad((theta += 0.1)));\r\n    const scale = Math.cos(THREE.Math.degToRad(theta * 2));\r\n    group.current.rotation.set(rotation, rotation, rotation);\r\n    group.current.scale.set(scale, scale, scale);\r\n  });\r\n\r\n  const [geometry, material, coordinates] = useMemo(() => {\r\n    const geometry = new THREE.SphereBufferGeometry(1, 10, 10);\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: new THREE.Color(\"lightblue\"),\r\n    });\r\n    const coordinates = new Array(STAR_COUNT)\r\n      .fill()\r\n      .map((i) => [\r\n        Math.random() * 800 - 400,\r\n        Math.random() * 800 - 400,\r\n        Math.random() * 800 - 400,\r\n      ]);\r\n    return [geometry, material, coordinates];\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={group}>\r\n      {coordinates.map(([p1, p2, p3], idx) => (\r\n        <mesh\r\n          key={idx}\r\n          geometry={geometry}\r\n          material={material}\r\n          position={[p1, p2, p3]}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}